#!/bin/bash

declare -A static_analysis
static_analysis["kubesec_io"]="kubesec"

declare -A dynamic_analysis
dynamic_analysis["kubesec_io"]="kubesec"


execDynamicAnalisys () {
    services=""
    for dkey in "${!dynamic_analysis[@]}"; do
        dval="${dynamic_analysis[$dkey]}"
        services+="${dval} "
    done

    echo "$services"
}

execStaticAnalisys () {
    services=""
    for skey in "${!static_analysis[@]}"; do
        sval="${static_analysis[$skey]}"
        services+="${sval} "
    done

    echo $services
}

execListAnalisys () {
    analyses=$1 

    # Split analysis into array   
    IFS=',' read -ra analysis_list <<< "$analyses"

    # Start docker with different configurations
    services=""
    used_keys=()
    for analysis_id in "${analysis_list[@]}"; do
        if ! [[ "${used_keys[*]}" =~ "$analysis_id" ]]; then # Check if analysis is already take
            service=""
            if [[ -v static_analysis["$analysis_id"] ]]; then
                service="${static_analysis["$analysis_id"]} "
            elif [[ -v dynamic_analysis["$analysis_id"] ]]; then
                service="${dynamic_analysis["$analysis_id"]} "
            fi
            services+="${service}"
            used_keys+=("$analysis_id")
        fi
    done

    echo "$services"
}

# Main: checking for arguments
command_count=0
command="ARGS=\"$@\" docker compose up app"
while getopts sdl: opt; do
    case "$opt" in
        l|d|s) 
            if [[ $command_count -eq 1 ]]; then
                exit 1
            fi
            command_count=$((count + 1))

            if [[ $opt == "s" ]]; then
                services=$(execStaticAnalisys)
            elif [[ $opt == "d" ]]; then
                services=$(execDynamicAnalisys)
            elif [[ $opt == "l" ]]; then
                services=$(execListAnalisys $OPTARG)
            fi
            ;;

        ?)
            eval "$command"
            ;;
    esac
done

eval "$command $services"